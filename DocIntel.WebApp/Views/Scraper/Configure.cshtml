@using DocIntel.Core.Importers
@model Scraper

@{
    ViewData["Title"] = $"Configure scraper '{Model.Name}'";
}

<div class="subheader">
    <h1 class="subheader-title">
        <i class="fal fa-inbox-in subheader-icon"></i> @ViewData["Title"]
    </h1>
</div>


<div class="row">
    <div class="col-12">

        @{
            var errors = ViewData.ModelState.SelectMany(x => x.Value.Errors);
        }
        @if (errors.Count() > 0)
        {
            <div class="alert alert-danger" role="alert">
                <strong>Oh snap!</strong> Change a few things up and try submitting again.

                <ul class="mb-0 mt-1">
                    @foreach (var error in errors)
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        <form asp-action="Configure">
            @Html.AntiForgeryToken()
            <input asp-for="ScraperId" type="hidden"/>

            <div id="panel-source-info" class="panel">
                <div class="panel-container show">
                    <div class="panel-content">
                        @{ var i = 0; }
                        @foreach (var setting in (List<FormField>) ViewBag.Settings)
                        {
                            <div class="form-group">
                                <input type="hidden" name="Settings[@i].Key" value="@setting.Key"/>
                                @if (setting.DataType == typeof(bool))
                                {
                                    <div class="custom-control">
                                        @if (bool.Parse(setting.Value))
                                        {
                                            <input checked="checked" id="Settings[@i].Value" name="Settings[@i].Value" type="checkbox" value="true"/>
                                        }
                                        else
                                        {
                                            <input id="Settings[@i].Value" name="Settings[@i].Value" type="checkbox" value="true"/>
                                        }
                                        <label class="control-label">@setting.Key</label>
                                    </div>
                                }
                                else if (setting.DataType == typeof(int))
                                {
                                    <label class="control-label">@setting.Key</label>
                                    <input type="text" name="Settings[@i].Value" class="form-control" value="@setting.Value"/>
                                }
                                else if (setting.Type == AttributeFieldType.Text)
                                {
                                    <label class="control-label">@setting.Key</label>
                                    <input type="text" name="Settings[@i].Value" class="form-control" value="@setting.Value"/>
                                }
                                else if (setting.Type == AttributeFieldType.Multiline)
                                {
                                    <label class="control-label">@setting.Key</label>
                                    <textarea name="Settings[@i].Value" class="form-control">@setting.Value</textarea>
                                }
                                else if (setting.Type == AttributeFieldType.Password)
                                {
                                    <label class="control-label">@setting.Key</label>
                                    <input type="password" name="Settings[@i].Value" class="form-control" value="@setting.Value"/>
                                }
                                else if (setting.Type == AttributeFieldType.Select)
                                {
                                    var elements = setting.PossibleValue.Select(_ => new SelectListItem {Value = _, Text = _, Selected = setting.Value == _});
                                    <label class="control-label">@setting.Key</label>
                                    <select asp-items="@elements" name="Settings[@i].Value" class="form-control">
                                    </select>
                                }
                            </div>
                            i++;
                        }
                    </div>
                </div>
            </div>

            <button type="submit" id="save-btn" class= "btn btn-pills btn-success waves-effect waves-themed btn-iconified">
                <i class="fal fa-save"></i> Save
            </button>

        </form>


    </div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}