@using System.Reflection
@using System.ComponentModel.DataAnnotations
@model IEnumerable<Observable>

<div class="row">

    <div class="col-12">

        <!--
        <div class="alert border-info bg-transparent text-info" role="alert">
            <strong>Info!</strong> These observables were automatically extracted and were either validated by an analyst or automatically accepted based on their history. 
            These observables are likely indicators of suspicious activity, and without any other indications should be considered as malicious or harmful.
        </div>
        -->

        <dl>
            @foreach (var documentObservable in Model.Where(_ => (_.Status != ObservableStatus.Rejected) & (_.Status != ObservableStatus.Whitelisted)).GroupBy(_ => _.Type))
            {
                var attribute = typeof(ObservableType).GetMember(documentObservable.Key.ToString()).FirstOrDefault()?.GetCustomAttribute<DisplayAttribute>();

                <dt>@(string.IsNullOrEmpty(attribute?.Name) ? documentObservable.Key.ToString() : attribute.Name) (@documentObservable.Count())</dt>
                <dd class="mx-0 my-3">
                    @if ((documentObservable.Key == ObservableType.Artefact) | (documentObservable.Key == ObservableType.File))
                    {
                        <ul class="list-unstyled">
                            @foreach (var o in documentObservable.GroupBy(_ => _.Hashes))
                            {
                                <li>
                                    @string.Join(", ", o.Key.Select(_ => $"{_.Value} ({_.HashType})"))
                                    @if (o.Count() > 1)
                                    {
                                        <text>(appears in @o.Count() files)</text>
                                    }
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <ul class="list-unstyled">
                            @foreach (var o in documentObservable.GroupBy(_ => _.Value))
                            {
                                <li>
                                    @o.Key
                                    @if (o.Count() > 1)
                                    {
                                        <text>(appears in @o.Count() files)</text>
                                    }
                                </li>
                            }
                        </ul>
                    }
                </dd>
            }
        </dl>

        @if (Model.Any(_ => (_.Status == ObservableStatus.Rejected) | (_.Status == ObservableStatus.Whitelisted)))
        {
            <p class="mb-0">
                <a data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
                    Show rejected &#8744;
                </a>
            </p>

            <div class="collapse pt-3" id="collapseExample">

                <p class="font-weight-bold">Rejected or Whitelisted Observables</p>

                <div class="alert alert-warning mb-3" role="alert">
                    The observables below were automatically extracted but were either not validated by an analyst or
                    automatically whitelisted. These observables are likely not good indicators of suspicious activity, 
                    without any other indications they should likely not be considered as malicious or harmful.
                </div>

                <ul class="list-unstyled">
                    @foreach (var documentObservable in Model.Where(_ => (_.Status == ObservableStatus.Rejected) | (_.Status == ObservableStatus.Whitelisted)).GroupBy(_ => _.Type))
                    {
                        if ((documentObservable.Key == ObservableType.Artefact) | (documentObservable.Key == ObservableType.File))
                        {
                            @foreach (var o in documentObservable.GroupBy(_ => _.Hashes))
                            {
                                <li>
                                    <s>@string.Join(", ", o.Key.Select(_ => $"{_.Value} ({_.HashType})"))</s>
                                    @if (o.Count() > 1)
                                    {
                                        <text>(appears in @o.Count() files</text>
                                    }
                                    @if (o.Any(_ => _.Status == ObservableStatus.Rejected))
                                    {
                                        <i class="fas fa-times-circle" title="The observable is not a good indicator"></i>
                                    }
                                    else if (o.Any(_ => _.Status == ObservableStatus.Whitelisted))
                                    {
                                        <i class="fas fa-shield-check" title="The observable is a known good and is not malicious nor harmful"></i>
                                    }
                                </li>
                            }
                        }
                        else
                        {
                            @foreach (var o in documentObservable.GroupBy(_ => _.Value))
                            {
                                <li>
                                    <s>@o.Key</s>
                                    @if (o.Count() > 1)
                                    {
                                        <text>(appears in @o.Count() files</text>
                                    }
                                    @if (o.Any(_ => _.Status == ObservableStatus.Rejected))
                                    {
                                        <i class="fas fa-times-circle" title="The observable is not a good indicator"></i>
                                    }
                                    else if (o.Any(_ => _.Status == ObservableStatus.Whitelisted))
                                    {
                                        <i class="fas fa-shield-check" title="The observable is a known good and is not malicious nor harmful"></i>
                                    }
                                </li>
                            }
                        }
                    }
                </ul>
            </div>
        }
    </div>

</div>