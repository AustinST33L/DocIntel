@using DocIntel.Core.Authorization.Operations
@model Document

@{
    ViewData["Title"] = "Upload a new document";
    var canCreateTags = (await AuthorizationService.AuthorizeAsync(User, null, TagOperations.Create)).Succeeded;
    var canCreateSources = (await AuthorizationService.AuthorizeAsync(User, null, SourceOperations.Create)).Succeeded;
}

<form method="post" enctype="multipart/form-data">

<div class="subheader">
    <h1 class="subheader-title">
        <i class="fal fa-file-alt subheader-icon"></i> Register a new document
    </h1>
    <div>
        <div class="btn-group mr-3">
            <button type="submit" formaction=@Url.Action("Create") formmethod="post" formenctype="multipart/form-data"
                    id="register-btn"
                    class="btn btn-success waves-effect waves-themed btn-iconified">
                <i class="fal fa-pencil-alt"></i> Register
            </button>
        </div>
        <div class="btn-group">
            <a asp-action="Discard" asp-route-id="@Model.DocumentId"
               class="btn btn-primary waves-effect waves-themed btn-iconified">
                <i class="fal fa-trash-alt"></i> Discard
            </a>
            <button type="submit"
                    formaction=@Url.Action("Save") formmethod="post" formenctype="multipart/form-data"
                    class="btn btn-primary waves-effect waves-themed btn-iconified">
                <i class="fal fa-save"></i> Save as pending
            </button>
        </div>
    </div>
</div>


<div class="row">
<div class="col-6">

@{
    var errors = ViewData.ModelState.SelectMany(x => x.Value.Errors);
}
@if (errors.Count() > 0)
{
    <div class="alert alert-danger" role="alert">
        <strong>Oh snap!</strong> Change a few things up and try submitting again.

        <ul class="mb-0 mt-1">
            @foreach (var error in errors)
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

<div id="panel-basic" class="panel">
    <div class="panel-hdr">
        <h2>
            Document
            <span class="fw-300">
                <i>Information</i>
            </span>
        </h2>
    </div>
    <div class="panel-container show">
        <div class="panel-content">
            <div class="form-group">
                <div class="d-flex justify-content-between">
                    <label asp-for="Title" class="form-label"></label>
                    <div>
                        <a href="javascript:void(0)" class="normalize-title" data-target="Title">Normalize title</a>
                    </div>
                </div>
                <input asp-for="Title" class="form-control"/>
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="form-label">Analyst&lsquo;s Summary</label>
                <textarea asp-for="ShortDescription" class="form-control summernote"  ></textarea>
                <span asp-validation-for="ShortDescription" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="form-label">Document Date</label>
                <div class="input-group">
                    <input asp-for="DocumentDate" value="@Model.DocumentDate.ToString("yyyy-MM-dd")" type="text"
                           class="form-control datepicker-control" placeholder="Select date" id="datepicker-documentDate">
                    <div class="input-group-append">
                        <span class="input-group-text fs-xl">
                            <i class="fal fa-calendar"></i>
                        </span>
                    </div>
                    <span asp-validation-for="DocumentDate" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Tags</label>
                <select data-placeholder="Select a tag"
                        data-tags="@(canCreateTags ? "true" : "false")"
                        class="autocomplete-tag form-control" name="tags" multiple="multiple">
                    @foreach (var tag in Model.DocumentTags)
                    {
                        <option selected="selected" value="@((string.IsNullOrEmpty(tag.Tag.Facet.Prefix) ? tag.Tag.Label : tag.Tag.Facet.Prefix + ":" + tag.Tag.Label).Trim())"
                                data-backgroundColor="@tag.Tag.BackgroundColor"
                                data-prefix="@tag.Tag.Facet.Prefix">
                            @(!string.IsNullOrEmpty(tag.Tag.Facet.Prefix) ? tag.Tag.Facet.Prefix + ":" : "")@tag.Tag.Label
                        </option>
                    }
                </select>
            </div>
        </div>
    </div>
</div>

<div id="panel-basic" class="panel">
    <div class="panel-hdr">
        <h2>
            Classification
            <span class="fw-300">
                <i>Information</i>
            </span>
        </h2>
    </div>
    <div class="panel-container show">
        <div class="panel-content">

            <div class="form-group">
                <label asp-for="ClassificationId" class="control-label">Classification</label>
                <select name="ClassificationId" class="form-control select2">
                    @foreach (var g in (IEnumerable<Classification>) ViewBag.AllClassifications)
                    {
                        @if (Model.ClassificationId == g.ClassificationId)
                        {
                            <option value="@g.ClassificationId" selected>@g.Title</option>
                        }
                        else
                        {
                            <option value="@g.ClassificationId">@g.Title</option>
                        }
                    }
                </select>
                <span asp-validation-for="ClassificationId" class="text-danger"></span>
            </div>

            @if (((List<Group>) ViewBag.AllGroups).Any())
            {
                <div class="form-group">
                    <label class="form-label">Releasable To</label>
                    <select class="select2 form-control" name="releasableTo" multiple="multiple">
                        @foreach (var tag in (List<Group>) ViewBag.AllGroups)
                        {
                            @if (Model.ReleasableTo.Any(_ => _.GroupId == tag.GroupId))
                            {
                                <option value="@tag.GroupId" selected>@tag.Name</option>
                            }
                            else
                            {
                                <option value="@tag.GroupId">@tag.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Eyes Only</label>
                    <select class="select2 form-control" name="eyesOnly" multiple="multiple">
                        @foreach (var tag in (List<Group>) ViewBag.AllGroups)
                        {
                            @if (Model.EyesOnly.Any(_ => _.GroupId == tag.GroupId))
                            {
                                <option value="@tag.GroupId" selected>@tag.Name</option>
                            }
                            else
                            {
                                <option value="@tag.GroupId">@tag.Name</option>
                            }
                        }
                    </select>
                </div>
            }
        </div>
    </div>
</div>

<div id="panel-source" class="panel">
    <div class="panel-hdr">
        <h2>
            Source
            <span class="fw-300">
                <i>Information</i>
            </span>
        </h2>
    </div>
    <div class="panel-container show">
        <div class="panel-content">
            <div class="form-group">
                <label class="form-label">Source</label>
                <select id="SourceId" data-placeholder="Select a source"
                        data-tags="@canCreateSources"
                        class="autocomplete-source form-control" name="SourceId">
                    @if (Model.Source != null)
                    {
                        <option selected="" value="@Model.Source.SourceId">@Model.Source.Title</option>
                    }
                </select>
                <span asp-validation-for="SourceId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="SourceUrl" class="form-label"></label>
                <input asp-for="SourceUrl" class="form-control"/>
                <span asp-validation-for="SourceUrl" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ExternalReference" class="form-label"></label>
                <input asp-for="ExternalReference" class="form-control"/>
                <p class="text-muted mt-1 mb-2">The reference provided by the source.</p>
                <span asp-validation-for="ExternalReference" class="text-danger"></span>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">

        <button type="submit" formaction=@Url.Action("Save") formmethod="post" formenctype="multipart/form-data"
                id="save-btn"
                class="btn btn-primary waves-effect waves-themed btn-iconified mr-4">
            <i class="fal fa-save"></i> Save as pending
        </button>

        <button type="submit" formaction=@Url.Action("Create") formmethod="post" formenctype="multipart/form-data"
                id="register-btn"
                class="btn btn-success waves-effect waves-themed btn-iconified">
            <i class="fal fa-pencil-alt"></i> Register
        </button>

    </div>
</div>

<input asp-for="DocumentId" class="form-control" type="hidden"/>
@Html.AntiForgeryToken()
</div>

<div class="col-6">
    <div id="panel-file" class="panel">
        <div class="panel-hdr">
            <h2>
                Document
                <span class="fw-300">
                    <i>Preview</i>
                </span>
            </h2>
            <div class="panel-toolbar pr-3 align-self-end">
                <ul class="nav nav-tabs border-bottom-0">
                    @{ var first = true; }
                    @foreach (var f in Model.Files.Where(_ => _.Preview))
                    {
                        <li class="nav-item @(first ? "active" : "")">
                            <a class="nav-link" data-toggle="tab" href="#tab-@f.FileId" role="tab" aria-selected="true">@f.Title</a>
                        </li>
                        first = false;
                    }
                </ul>
            </div>
            <div class="panel-toolbar">
                <button class="btn btn-panel waves-effect waves-themed" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"></button>
            </div>
        </div>
        <div class="panel-container show">
            <div class="panel-content p-0">
                <div class="tab-content">
                    <!-- PDF Pane  -->
                    @{ first = true; }
                    @foreach (var f in Model.Files.Where(_ => _.Preview))
                    {
                        <div class="tab-pane fade @(first ? "show active" : "")" id="tab-@f.FileId" role="tabpanel">
                            @await Html.PartialAsync("../File/_FilePreview", f, new ViewDataDictionary(ViewData))
                        </div>
                        first = false;
                    }
                </div>
            </div>
        </div>
    </div>
</div>
</div>

</form>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}