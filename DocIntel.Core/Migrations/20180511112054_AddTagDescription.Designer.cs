/*
 * DocIntel
 * Copyright (C) 2018-2021 Belgian Defense, Antoine Cailliau
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
// <auto-generated />
using DocIntel.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DocIntel.Core.Migrations
{
    [DbContext(typeof(DocIntelContext))]
    [Migration("20180511112054_AddTagDescription")]
    partial class AddTagDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("DocIntel.Core.Models.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorUserId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Title");

                    b.HasKey("CollectionId");

                    b.HasIndex("AuthorUserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("DocIntel.Core.Models.CollectionTag", b =>
                {
                    b.Property<int>("CollectionId");

                    b.Property<int>("TagId");

                    b.HasKey("CollectionId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CollectionTag");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Classification");

                    b.Property<DateTime>("DocumentDate");

                    b.Property<string>("Filepath");

                    b.Property<string>("MispEvents");

                    b.Property<DateTime>("ModificationDate");

                    b.Property<string>("Note");

                    b.Property<int?>("OwnerUserId");

                    b.Property<string>("Reference");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Sha256Hash");

                    b.Property<string>("ShortDescription");

                    b.Property<string>("Source");

                    b.Property<string>("SourceUrl");

                    b.Property<string>("Title");

                    b.HasKey("DocumentId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentCollection", b =>
                {
                    b.Property<int>("DocumentId");

                    b.Property<int>("CollectionId");

                    b.HasKey("DocumentId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("DocumentCollection");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentTag", b =>
                {
                    b.Property<int>("DocumentId");

                    b.Property<int>("TagId");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTag");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<string>("TextColor");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DocIntel.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Collection", b =>
                {
                    b.HasOne("DocIntel.Core.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.CollectionTag", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Collection", "Collection")
                        .WithMany("Tags")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DocIntel.Core.Models.Tag", "Tag")
                        .WithMany("Collections")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DocIntel.Core.Models.Document", b =>
                {
                    b.HasOne("DocIntel.Core.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentCollection", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Collection", "Collection")
                        .WithMany("Sources")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("Collections")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentTag", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("DocumentTags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DocIntel.Core.Models.Tag", "Tag")
                        .WithMany("Documents")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
