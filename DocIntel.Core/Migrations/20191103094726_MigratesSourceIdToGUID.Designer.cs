/*
 * DocIntel
 * Copyright (C) 2018-2021 Belgian Defense, Antoine Cailliau
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
// <auto-generated />
using System;
using DocIntel.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DocIntel.Core.Migrations
{
    [DbContext(typeof(DocIntelContext))]
    [Migration("20191103094726_MigratesSourceIdToGUID")]
    partial class MigratesSourceIdToGUID
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DocIntel.Core.Models.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectType")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("Verb")
                        .HasColumnType("integer");

                    b.HasKey("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PermissionList")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Classification")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filepath")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("RegisteredById")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Sha256Hash")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text");

                    b.Property<bool>("Starred")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocumentId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("RegisteredById");

                    b.HasIndex("SourceId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentRead", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentRead");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentTag", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTag");
                });

            modelBuilder.Entity("DocIntel.Core.Models.InboxItem", b =>
                {
                    b.Property<int>("InboxItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Classification")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("OriginalFilename")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("Sha256Hash")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("TempFileToken")
                        .HasColumnType("text");

                    b.Property<string>("TempFilepath")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("InboxItemId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Inbox");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Observable", b =>
                {
                    b.Property<int>("ObservableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ObservableId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Observables");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Source", b =>
                {
                    b.Property<Guid>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("HomePage")
                        .HasColumnType("text");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("text");

                    b.Property<string>("LogoFilename")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RSSFeed")
                        .HasColumnType("text");

                    b.Property<string>("Reddit")
                        .HasColumnType("text");

                    b.Property<string>("RegisteredById")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.HasKey("SourceId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("RegisteredById");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FacetId")
                        .HasColumnType("text");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("TextColor")
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FacetId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DocIntel.Core.Models.TagFacet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Facets");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserDocumentSubscription", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("UserDocumentSubscription");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserStatistics", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "Key");

                    b.ToTable("UserStatistics");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserTagSubscription", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UserTagSubscriptions");
                });

            modelBuilder.Entity("DocIntel.Core.Models.WhiteListObservable", b =>
                {
                    b.Property<int>("WhiteListObservableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WhiteListObservableId");

                    b.ToTable("WhiteListObservables");
                });

            modelBuilder.Entity("DocIntel.Ldap.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DefaultTagColor")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentEditNotification", b =>
                {
                    b.HasBaseType("DocIntel.Core.Models.Notification");

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("SenderId")
                        .HasColumnName("SenderId")
                        .HasColumnType("text");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SenderId");

                    b.HasDiscriminator().HasValue("DocumentEditNotification");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentMentionNotification", b =>
                {
                    b.HasBaseType("DocIntel.Core.Models.Notification");

                    b.Property<int>("CommentId")
                        .HasColumnName("CommentId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("MentionedDocumentId")
                        .HasColumnName("MentionedDocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("SenderId")
                        .HasColumnName("SenderId")
                        .HasColumnType("text");

                    b.HasIndex("CommentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MentionedDocumentId");

                    b.HasIndex("SenderId");

                    b.HasDiscriminator().HasValue("DocumentMentionNotification");
                });

            modelBuilder.Entity("DocIntel.Core.Models.MentionNotification", b =>
                {
                    b.HasBaseType("DocIntel.Core.Models.Notification");

                    b.Property<int>("CommentId")
                        .HasColumnName("CommentId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("SenderId")
                        .HasColumnName("SenderId")
                        .HasColumnType("text");

                    b.HasIndex("CommentId")
                        .HasName("IX_Notifications_CommentId1");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SenderId");

                    b.HasDiscriminator().HasValue("MentionNotification");
                });

            modelBuilder.Entity("DocIntel.Core.Models.NewCommentNotification", b =>
                {
                    b.HasBaseType("DocIntel.Core.Models.Notification");

                    b.Property<int>("CommentId")
                        .HasColumnName("CommentId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("SenderId")
                        .HasColumnName("SenderId")
                        .HasColumnType("text");

                    b.HasIndex("CommentId")
                        .HasName("IX_Notifications_CommentId2");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SenderId");

                    b.HasDiscriminator().HasValue("NewCommentNotification");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Activity", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppUserRole", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Ldap.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.Comment", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("Comments")
                        .HasForeignKey("DocumentId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Document", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("DocIntel.Ldap.AppUser", "RegisteredBy")
                        .WithMany()
                        .HasForeignKey("RegisteredById");

                    b.HasOne("DocIntel.Core.Models.Source", "Source")
                        .WithMany("Documents")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentRead", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("DocumentReadUsers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Ldap.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentTag", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("DocumentTags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Tag", "Tag")
                        .WithMany("Documents")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.InboxItem", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Notification", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", "Recipient")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.Observable", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("Observables")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.Source", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("DocIntel.Ldap.AppUser", "RegisteredBy")
                        .WithMany()
                        .HasForeignKey("RegisteredById");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Tag", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DocIntel.Core.Models.TagFacet", "Facet")
                        .WithMany("Tags")
                        .HasForeignKey("FacetId");

                    b.HasOne("DocIntel.Ldap.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserDocumentSubscription", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("SubscribedUsers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Ldap.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserStatistics", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", "User")
                        .WithMany("Statistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserTagSubscription", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Tag", "Tag")
                        .WithMany("SubscribedUser")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Ldap.AppUser", "User")
                        .WithMany("SubscribedTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DocIntel.Ldap.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentEditNotification", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Ldap.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentMentionNotification", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Document", "MentionedDocument")
                        .WithMany()
                        .HasForeignKey("MentionedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Ldap.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.MentionNotification", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_Notifications_Comments_CommentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Ldap.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.NewCommentNotification", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_Notifications_Comments_CommentId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Ldap.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
