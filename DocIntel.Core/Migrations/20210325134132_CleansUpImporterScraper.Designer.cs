// <auto-generated />
using System;
using DocIntel.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Newtonsoft.Json.Linq;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DocIntel.Core.Migrations
{
    [DbContext(typeof(DocIntelContext))]
    [Migration("20210325134132_CleansUpImporterScraper")]
    partial class CleansUpImporterScraper
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.Entity("DocIntel.Core.Models.APIKey", b =>
                {
                    b.Property<Guid>("APIKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("LastIP")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsage")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("APIKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("APIKeys");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("ObjectType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PermissionList")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Bot")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<UserPreferences>("Preferences")
                        .HasColumnType("jsonb");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Change", b =>
                {
                    b.Property<string>("ChangeId")
                        .HasColumnType("text");

                    b.Property<string>("ActivityId")
                        .HasColumnType("text");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer");

                    b.Property<int>("Verb")
                        .HasColumnType("integer");

                    b.HasKey("ChangeId");

                    b.HasIndex("ActivityId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Classification", b =>
                {
                    b.Property<Guid>("ClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentClassificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ClassificationId");

                    b.HasIndex("ParentClassificationId");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<JObject>("MetaData")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegisteredById")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SequenceId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocumentId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("RegisteredById");

                    b.HasIndex("SourceId");

                    b.HasIndex("ThumbnailId")
                        .IsUnique();

                    b.HasIndex("URL")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentFile", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoGenerated")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ClassificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<string>("Filepath")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<JObject>("MetaData")
                        .HasColumnType("jsonb");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("OverrideClassification")
                        .HasColumnType("boolean");

                    b.Property<bool>("OverrideEyesOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("OverrideReleasableTo")
                        .HasColumnType("boolean");

                    b.Property<bool>("Preview")
                        .HasColumnType("boolean");

                    b.Property<string>("RegisteredById")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Sha256Hash")
                        .HasColumnType("text");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("FileId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("RegisteredById");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentRead", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentRead");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentTag", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTag");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupId");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DocIntel.Core.Models.ImportRule", b =>
                {
                    b.Property<Guid>("ImportRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ImportRuleSetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Replacement")
                        .HasColumnType("text");

                    b.Property<string>("SearchPattern")
                        .HasColumnType("text");

                    b.HasKey("ImportRuleId");

                    b.HasIndex("ImportRuleSetId");

                    b.ToTable("ImportRules");
                });

            modelBuilder.Entity("DocIntel.Core.Models.ImportRuleSet", b =>
                {
                    b.Property<Guid>("ImportRuleSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ImportRuleSetId");

                    b.ToTable("ImportRuleSets");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Importer", b =>
                {
                    b.Property<Guid>("ImporterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("CollectionDelay")
                        .HasColumnType("interval");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FetchingUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastCollection")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceClass")
                        .HasColumnType("text");

                    b.Property<JObject>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ImporterId");

                    b.HasIndex("FetchingUserId");

                    b.ToTable("IncomingFeeds");
                });

            modelBuilder.Entity("DocIntel.Core.Models.InboxItem", b =>
                {
                    b.Property<int>("InboxItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<Guid?>("ClassificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("OriginalFilename")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("Sha256Hash")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("TempFileToken")
                        .HasColumnType("text");

                    b.Property<string>("TempFilepath")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("InboxItemId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Inbox");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Member", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MemberId");

                    b.HasAlternateKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ActivityId")
                        .HasColumnType("text");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DocIntel.Core.Models.OrderedImportRuleSet", b =>
                {
                    b.Property<Guid>("ScraperId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImportRuleSetId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("ScraperId", "ImportRuleSetId");

                    b.HasIndex("ImportRuleSetId");

                    b.ToTable("OrderedImportRuleSet");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Scraper", b =>
                {
                    b.Property<Guid>("ScraperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("OverrideSource")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceClass")
                        .HasColumnType("text");

                    b.Property<JObject>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<bool>("SkipInbox")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid");

                    b.HasKey("ScraperId");

                    b.HasIndex("SourceId");

                    b.ToTable("Scrapers");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Source", b =>
                {
                    b.Property<Guid>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BiasedWording")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<int>("Factual")
                        .HasColumnType("integer");

                    b.Property<string>("HomePage")
                        .HasColumnType("text");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("text");

                    b.Property<string>("LogoFilename")
                        .HasColumnType("text");

                    b.Property<JObject>("MetaData")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PoliticalAffiliation")
                        .HasColumnType("integer");

                    b.Property<int>("PoliticalSpectrum")
                        .HasColumnType("integer");

                    b.Property<string>("RSSFeed")
                        .HasColumnType("text");

                    b.Property<string>("Reddit")
                        .HasColumnType("text");

                    b.Property<string>("RegisteredById")
                        .HasColumnType("text");

                    b.Property<int>("Reliability")
                        .HasColumnType("integer");

                    b.Property<int>("StoryChoice")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SourceId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("RegisteredById");

                    b.HasIndex("URL")
                        .IsUnique();

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("DocIntel.Core.Models.SubmittedDocument", b =>
                {
                    b.Property<Guid>("SubmittedDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("SubmitterId")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("SubmittedDocumentId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("SubmittedDocuments");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FacetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<JObject>("MetaData")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FacetId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("URL");

                    b.HasIndex("FacetId", "Label")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DocIntel.Core.Models.TagFacet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("text");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("boolean");

                    b.Property<JObject>("MetaData")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("Prefix")
                        .IsUnique();

                    b.ToTable("Facets");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserDocumentSubscription", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("UserDocumentSubscription");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserFacetSubscription", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("FacetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "FacetId");

                    b.HasIndex("FacetId");

                    b.ToTable("UserFacetSubscriptions");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserSourceSubscription", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "SourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("UserSourceSubscription");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserStatistics", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "Key");

                    b.ToTable("UserStatistics");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserTagSubscription", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UserTagSubscriptions");
                });

            modelBuilder.Entity("DocumentFileGroup", b =>
                {
                    b.Property<Guid>("FilesReleasableToFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReleasableToGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("FilesReleasableToFileId", "ReleasableToGroupId");

                    b.HasIndex("ReleasableToGroupId");

                    b.ToTable("FileRelToGroup");
                });

            modelBuilder.Entity("DocumentFileGroup1", b =>
                {
                    b.Property<Guid>("EyesOnlyGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FilesEyesOnlyFileId")
                        .HasColumnType("uuid");

                    b.HasKey("EyesOnlyGroupId", "FilesEyesOnlyFileId");

                    b.HasIndex("FilesEyesOnlyFileId");

                    b.ToTable("FileGroupEyesOnly");
                });

            modelBuilder.Entity("DocumentGroup", b =>
                {
                    b.Property<Guid>("DocumentsReleasableToDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReleasableToGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("DocumentsReleasableToDocumentId", "ReleasableToGroupId");

                    b.HasIndex("ReleasableToGroupId");

                    b.ToTable("DocumentRelToGroup");
                });

            modelBuilder.Entity("DocumentGroup1", b =>
                {
                    b.Property<Guid>("DocumentsEyesOnlyDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EyesOnlyGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("DocumentsEyesOnlyDocumentId", "EyesOnlyGroupId");

                    b.HasIndex("EyesOnlyGroupId");

                    b.ToTable("DocumentGroupEyesOnly");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DocIntel.Core.Models.APIKey", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany("APIKeys")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Activity", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppRole", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DocIntel.Core.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppUserRole", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Change", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Activity", null)
                        .WithMany("Changes")
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Classification", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Classification", "ParentClassification")
                        .WithMany()
                        .HasForeignKey("ParentClassificationId");

                    b.Navigation("ParentClassification");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Comment", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("Comments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("Author");

                    b.Navigation("Document");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Document", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("DocIntel.Core.Models.AppUser", "RegisteredBy")
                        .WithMany()
                        .HasForeignKey("RegisteredById");

                    b.HasOne("DocIntel.Core.Models.Source", "Source")
                        .WithMany("Documents")
                        .HasForeignKey("SourceId");

                    b.HasOne("DocIntel.Core.Models.DocumentFile", "Thumbnail")
                        .WithOne("DocumentThumbnail")
                        .HasForeignKey("DocIntel.Core.Models.Document", "ThumbnailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Classification");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("RegisteredBy");

                    b.Navigation("Source");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentFile", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId");

                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("Files")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("DocIntel.Core.Models.AppUser", "RegisteredBy")
                        .WithMany()
                        .HasForeignKey("RegisteredById");

                    b.Navigation("Classification");

                    b.Navigation("Document");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("RegisteredBy");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentRead", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentTag", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("DocumentTags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Tag", "Tag")
                        .WithMany("Documents")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Group", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Group", "ParentGroup")
                        .WithMany()
                        .HasForeignKey("ParentGroupId");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("DocIntel.Core.Models.ImportRule", b =>
                {
                    b.HasOne("DocIntel.Core.Models.ImportRuleSet", "ImportRuleSet")
                        .WithMany("ImportRules")
                        .HasForeignKey("ImportRuleSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportRuleSet");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Importer", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "FetchingUser")
                        .WithMany()
                        .HasForeignKey("FetchingUserId");

                    b.Navigation("FetchingUser");
                });

            modelBuilder.Entity("DocIntel.Core.Models.InboxItem", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId");

                    b.HasOne("DocIntel.Core.Models.AppUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Classification");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Member", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Notification", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("DocIntel.Core.Models.AppUser", "Recipient")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("DocIntel.Core.Models.OrderedImportRuleSet", b =>
                {
                    b.HasOne("DocIntel.Core.Models.ImportRuleSet", "ImportRuleSet")
                        .WithMany("IncomingFeeds")
                        .HasForeignKey("ImportRuleSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Scraper", "Scraper")
                        .WithMany("ImportRuleSets")
                        .HasForeignKey("ScraperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportRuleSet");

                    b.Navigation("Scraper");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Scraper", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Source", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("DocIntel.Core.Models.AppUser", "RegisteredBy")
                        .WithMany()
                        .HasForeignKey("RegisteredById");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("RegisteredBy");
                });

            modelBuilder.Entity("DocIntel.Core.Models.SubmittedDocument", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Tag", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DocIntel.Core.Models.TagFacet", "Facet")
                        .WithMany("Tags")
                        .HasForeignKey("FacetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Facet");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("DocIntel.Core.Models.TagFacet", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DocIntel.Core.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserDocumentSubscription", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", "Document")
                        .WithMany("SubscribedUsers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserFacetSubscription", b =>
                {
                    b.HasOne("DocIntel.Core.Models.TagFacet", "Facet")
                        .WithMany("SubscribedUsers")
                        .HasForeignKey("FacetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany("SubscribedFacets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserSourceSubscription", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserStatistics", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany("Statistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocIntel.Core.Models.UserTagSubscription", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Tag", "Tag")
                        .WithMany("SubscribedUser")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.AppUser", "User")
                        .WithMany("SubscribedTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocumentFileGroup", b =>
                {
                    b.HasOne("DocIntel.Core.Models.DocumentFile", null)
                        .WithMany()
                        .HasForeignKey("FilesReleasableToFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("ReleasableToGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentFileGroup1", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("EyesOnlyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.DocumentFile", null)
                        .WithMany()
                        .HasForeignKey("FilesEyesOnlyFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentGroup", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsReleasableToDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("ReleasableToGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentGroup1", b =>
                {
                    b.HasOne("DocIntel.Core.Models.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsEyesOnlyDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocIntel.Core.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("EyesOnlyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DocIntel.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocIntel.Core.Models.Activity", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DocIntel.Core.Models.AppUser", b =>
                {
                    b.Navigation("APIKeys");

                    b.Navigation("Memberships");

                    b.Navigation("Notifications");

                    b.Navigation("Statistics");

                    b.Navigation("SubscribedFacets");

                    b.Navigation("SubscribedTags");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Document", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DocumentTags");

                    b.Navigation("Files");

                    b.Navigation("SubscribedUsers");
                });

            modelBuilder.Entity("DocIntel.Core.Models.DocumentFile", b =>
                {
                    b.Navigation("DocumentThumbnail");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Group", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("DocIntel.Core.Models.ImportRuleSet", b =>
                {
                    b.Navigation("ImportRules");

                    b.Navigation("IncomingFeeds");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Scraper", b =>
                {
                    b.Navigation("ImportRuleSets");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Source", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocIntel.Core.Models.Tag", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("SubscribedUser");
                });

            modelBuilder.Entity("DocIntel.Core.Models.TagFacet", b =>
                {
                    b.Navigation("SubscribedUsers");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
